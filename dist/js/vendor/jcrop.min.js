!function(angular) {
    angular.module("ngJcrop", []).constant("ngJcroptDefaultConfig", {
        widthLimit: 1e3,
        heightLimit: 1e3,
        jcrop: {
            maxWidth: 300,
            maxHeight: 200
        }
    }).constant("ngJcropTemplate", '<div class="ng-jcrop">    <div class="ng-jcrop-image-wrapper">        <img class="ng-jcrop-image" />   </div>   <div class="ng-jcrop-thumbnail-wrapper" ng-style="previewImgStyle">       <img class="ng-jcrop-thumbnail" />   </div></div>').provider("ngJcropConfig", [ "ngJcroptDefaultConfig", "ngJcropTemplate", function(ngJcroptDefaultConfig, ngJcropTemplate) {
        var config = angular.copy(ngJcroptDefaultConfig);
        return config.template = ngJcropTemplate, {
            setConfig: function(objConfig) {
                angular.extend(config, objConfig);
            },
            setJcropConfig: function(objConfig) {
                angular.extend(config.jcrop, objConfig);
            },
            $get: function() {
                return config;
            }
        };
    } ]).run([ "$window", function($window) {
        if (!$window.jQuery) throw new Error("jQuery isn't included");
        if (!$window.jQuery.Jcrop) throw new Error("Jcrop isn't included");
    } ]).directive("ngJcrop", [ "ngJcropConfig", function(ngJcropConfig) {
        return {
            restrict: "A",
            scope: {
                ngJcrop: "=",
                thumbnail: "=",
                selection: "="
            },
            template: ngJcropConfig.template,
            controller: "JcropController"
        };
    } ]).directive("ngJcropInput", function() {
        return {
            restrict: "A",
            controller: "JcropInputController"
        };
    }).controller("JcropInputController", [ "$rootScope", "$element", "$scope", function($rootScope, $element, $scope) {
        if ("file" !== $element[0].type) throw new Error('ngJcropInput directive must be placed with an input[type="file"]');
        $scope.setImage = function(image) {
            var reader = new FileReader();
            reader.onload = function(ev) {
                $rootScope.$broadcast("JcropChangeSrc", ev.target.result), $element[0].value = "";
            }, reader.readAsDataURL(image);
        }, $element.on("change", function(ev) {
            var image = ev.currentTarget.files[0];
            $scope.setImage(image);
        });
    } ]).controller("JcropController", [ "$scope", "$element", "ngJcropConfig", function($scope, $element, ngJcropConfig) {
        if (angular.isUndefined($scope.selection)) throw new Error("ngJcrop: attribute `selection` is mandatory");
        if (!angular.isArray($scope.selection) && null !== $scope.selection) throw new Error("ngJcrop: attribute `selection` must be an array");
        $scope.mainImg = null, $scope.imgStyle = {
            width: ngJcropConfig.jcrop.maxWidth,
            height: ngJcropConfig.jcrop.maxHeight
        }, $scope.previewImg = null, $scope.previewImgStyle = {
            width: "100px",
            height: "100px",
            overflow: "hidden",
            "margin-left": "5px"
        }, $scope.jcrop = null, $scope.updateCurrentSizes = function(img) {
            var widthShrinkRatio = img.width / ngJcropConfig.jcrop.maxWidth, heightShrinkRatio = img.height / ngJcropConfig.jcrop.maxHeight, widthConstraining = img.width > ngJcropConfig.jcrop.maxWidth && widthShrinkRatio > heightShrinkRatio, heightConstraining = img.height > ngJcropConfig.jcrop.maxHeight && heightShrinkRatio > widthShrinkRatio;
            widthConstraining ? ($scope.imgStyle.width = ngJcropConfig.jcrop.maxWidth, $scope.imgStyle.height = img.height / widthShrinkRatio) : heightConstraining ? ($scope.imgStyle.height = ngJcropConfig.jcrop.maxHeight, 
            $scope.imgStyle.width = img.width / heightShrinkRatio) : ($scope.imgStyle.height = img.height, 
            $scope.imgStyle.width = img.width);
        }, $scope.setSelection = function(coords) {
            angular.isArray($scope.selection) || ($scope.selection = []), $scope.selection[0] = Math.round(coords.x), 
            $scope.selection[1] = Math.round(coords.y), $scope.selection[2] = Math.round(coords.x2), 
            $scope.selection[3] = Math.round(coords.y2), $scope.selection[4] = Math.round(coords.w), 
            $scope.selection[5] = Math.round(coords.h);
        }, $scope.showPreview = function(coords) {
            if ($scope.selectionWatcher || $scope.$apply(function() {
                $scope.setSelection(coords);
            }), $scope.thumbnail) {
                var rx = 100 / coords.w, ry = 100 / coords.h;
                $scope.previewImg.css({
                    width: Math.round(rx * $scope.imgStyle.width) + "px",
                    maxWidth: Math.round(rx * $scope.imgStyle.width) + "px",
                    height: Math.round(ry * $scope.imgStyle.height) + "px",
                    maxHeight: Math.round(ry * $scope.imgStyle.height) + "px",
                    marginLeft: "-" + Math.round(rx * coords.x) + "px",
                    marginTop: "-" + Math.round(ry * coords.y) + "px"
                });
            }
        }, $scope.onMainImageLoad = function() {
            $scope.mainImg.off("load", $scope.onMainImageLoad), $scope.updateCurrentSizes($("<img>").attr("src", $scope.mainImg[0].src)[0]);
            var config = angular.extend({
                onChange: $scope.showPreview,
                onSelect: $scope.showPreview,
                aspectRatio: 1
            }, ngJcropConfig.jcrop);
            $scope.selection && 6 === $scope.selection.length && (config.setSelect = $scope.selection), 
            $scope.jcrop = jQuery.Jcrop($scope.mainImg, config);
        }, $scope.destroy = function() {
            $scope.jcrop && ($scope.mainImg && $scope.mainImg.off("load"), $scope.jcrop.destroy(), 
            $scope.jcrop = null);
        }, $scope.init = function(src) {
            $scope.destroy(), $scope.mainImg = $("<img>").addClass("ng-jcrop-image"), $scope.mainImg.on("load", $scope.onMainImageLoad), 
            $scope.mainImg.css({
                maxWidth: ngJcropConfig.jcrop.maxWidth,
                maxHeight: ngJcropConfig.jcrop.maxHeight
            }), $scope.mainImg.attr("src", src), $element.find(".ng-jcrop-image-wrapper").empty().append($scope.mainImg);
            var thumbnailWrapper = $element.find(".ng-jcrop-thumbnail-wrapper");
            $scope.previewImg = $element.find(".ng-jcrop-thumbnail"), $scope.thumbnail ? (thumbnailWrapper.show(), 
            $scope.previewImg.attr("src", src)) : thumbnailWrapper.hide();
        }, $scope.$on("$destroy", $scope.destroy), $scope.$on("JcropChangeSrc", function(ev, src) {
            $scope.$apply(function() {
                $scope.setSelection({
                    x: 0,
                    y: 0,
                    x2: ngJcropConfig.widthLimit,
                    y2: ngJcropConfig.heightLimit,
                    w: ngJcropConfig.widthLimit,
                    h: ngJcropConfig.heightLimit
                }), $scope.ngJcrop = src;
            });
        }), $scope.$watch("ngJcrop", function(newValue, oldValue, scope) {
            scope.init(newValue);
        }), $scope.$watch("thumbnail", function(newValue, oldValue, scope) {
            var src = scope.mainImg.attr("src");
            scope.init(src);
        }), $scope.$watch("selection", function(newValue, oldValue, scope) {
            scope.jcrop && (scope.selectionWatcher = !0, angular.isArray(scope.selection) ? scope.jcrop.setSelect(scope.selection) : scope.jcrop.release(), 
            scope.selectionWatcher = !1);
        });
    } ]);
}(angular);