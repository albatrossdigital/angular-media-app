"use strict";

!function() {
    angular.module("app", [ "app.core", "app.flickr", "ui.router", "ngResource", "infinite-scroll", "angularFileUpload", "xeditable", "ngJcrop" ]).run([ "$rootScope", "$state", "$stateParams", "$window", "$location", "$timeout", "editableOptions", function($rootScope, $state, $stateParams, $window, $location, $timeout, editableOptions) {
        $rootScope.flickrApiKey = "5202f8e46861f39f55bedfa2374a41d8", $rootScope.apiUrlUpload = "http://liftoff.local/api/angular-media/", 
        $rootScope.apiUrlBrowse = "http://liftoff.local/api/angular-media/", $rootScope.appUrl = "", 
        $rootScope.files = [], $rootScope.multiple = !1, $rootScope.cardinality = 1, $rootScope.tabs = [ {
            key: "upload",
            title: "Upload"
        }, {
            key: "browse",
            title: "Site Files",
            params: {
                person: "all"
            }
        }, {
            key: "flickr",
            title: "Flickr"
        } ], editableOptions.theme = "bs3", $rootScope.$state = $state, $rootScope.$stateParams = $stateParams, 
        $rootScope.$on("$stateChangeSuccess", function() {}), $rootScope.goSubRoute = function(baseRoute, subRoute, baseName) {
            baseName = void 0 == baseName ? "base" : baseName;
            var stateName = baseRoute + "." + subRoute;
            try {
                var state = $state.get(stateName);
                if (void 0 == state || null == state) throw "myException";
            } catch (e) {
                stateName = baseRoute + "." + baseName;
            }
            $state.go(stateName);
        };
    } ]).config([ "$locationProvider", "$stateProvider", "$urlRouterProvider", function($locationProvider, $stateProvider) {} ]);
}(jQuery), angular.module("app.core", [ "ui.router", "angularFileUpload" ]).config([ "$stateProvider", "$urlRouterProvider", function($stateProvider) {
    $stateProvider.state("base", {}).state("modal.edit", {
        controller: "edit",
        params: {
            fid: null
        },
        templateUrl: appUrl + "views/edit.html"
    }).state("modal", {
        templateUrl: appUrl + "views/modal.html",
        controller: "modal",
        onEnter: function($state) {
            $(document).on("keyup", function(e) {
                27 == e.keyCode && ($(document).off("keyup"), $state.go("base"));
            }), $(document).on("click", ".modal-backdrop, .modal-holder", function() {
                $state.go("base");
            }), $(document).on("click", ".modal-box, .modal-box *", function(e) {
                e.stopPropagation();
            });
        },
        "abstract": !0
    }).state("modal.upload", {
        templateUrl: appUrl + "views/upload.html",
        controller: "upload"
    }).state("modal.browse", {
        params: {
            person: "all"
        },
        templateUrl: appUrl + "views/browse.html",
        controller: "browse"
    });
} ]).controller("modal", function($scope, $rootScope, $state) {
    $scope.activeTab = $state.current.controller, $scope.loadTab = function(item) {
        $scope.activeTab = item.key, $state.go("modal." + item.key, item.params);
    };
}).controller("edit", function($scope, $rootScope, $state, $stateParams, CoreFile) {
    $scope.file = CoreFile.load({
        fid: $stateParams.fid
    });
}).controller("browse", function($scope, $rootScope, $state, $stateParams, CoreBrowser, CoreFile) {
    $scope.filters = {
        page: 1,
        person: $stateParams.person
    }, console.log($stateParams), $scope.selected = [], $scope.items = [], $scope.loadItems = function(push) {
        CoreBrowser.query($scope.filters, function(data) {
            void 0 !== push && 1 == push ? Array.prototype.push.apply($scope.items, data) : $scope.items = data, 
            console.log($scope.items);
        });
    }, $scope.updateFilters = function($event) {
        $scope.filters.page = 1, $scope.items = $scope.loadItems(), void 0 != $event && $event.preventDefault();
    }, $scope.updateFilters(), $scope.updateActive = function(item) {
        void 0 != item && ($rootScope.multiple && item.active ? (item.active = !1, angular.forEach($scope.selected, function(activeItem, key) {
            activeItem.id == item.id && $scope.selected.splice(key, 1);
        })) : ($scope.active = item, $rootScope.multiple ? (item.active = !0, $scope.active = item) : angular.forEach($scope.items, function(activeItem, key) {
            $scope.items[key].active = activeItem.id == item.id ? !0 : !1;
        }), $rootScope.multiple ? $scope.selected.push(item) : $scope.selected = [ item ], 
        CoreFile.load({
            fid: item.fid
        }, function(data) {
            $scope.active = data, console.log("corefile data", data);
        })));
    }, $scope.submit = function($event) {
        console.log($scope.selected), Array.prototype.push.apply($rootScope.files, $scope.selected), 
        jQuery("#" + $rootScope.fieldName + "_media").trigger("change"), $state.go("base"), 
        $event.preventDefault();
    }, $scope.addItems = function() {};
}).controller("upload", function($scope, $rootScope, $state, $stateParams, FileUploader) {
    $scope.uploading = !1, $scope.selected = [];
    var uploader = $scope.uploader = new FileUploader({
        url: $rootScope.apiUrlUpload + "upload",
        autoUpload: !0
    });
    uploader.onAfterAddingFile = function(fileItem) {
        fileItem.showThumb = -1 != fileItem.file.type.indexOf("image") ? !0 : !1;
    }, uploader.onBeforeUploadItem = function() {
        $scope.uploading = !0;
    }, uploader.onSuccessItem = function(fileItem, response, status, headers) {
        console.info("onSuccessItem", fileItem, response, status, headers), $scope.selected.push(response), 
        fileItem.details = response, console.log(fileItem);
    }, uploader.onCompleteAll = function() {
        console.info("onCompleteAll"), $scope.uploading = !1;
    }, $scope.fileDetails = function(key, file) {
        void 0 != file.details && $scope.file != file ? ($scope.file = file.details, $scope.activeKey = key) : ($scope.file = void 0, 
        $scope.activeKey = -1);
    }, $scope.submit = function($event) {
        console.log($scope.selected), Array.prototype.push.apply($rootScope.files, $scope.selected), 
        jQuery("#" + $rootScope.fieldName + "_media").trigger("change"), $scope.selected = [], 
        $state.go("base"), $event.preventDefault();
    };
}), angular.module("app.flickr", [ "ui.router", "ngResource" ]).config([ "$stateProvider", "$urlRouterProvider", function($stateProvider) {
    $stateProvider.state("modal.flickr", {
        templateUrl: appUrl + "views/flickr.html",
        controller: function($scope, $rootScope, $state, Flickr, CoreFile) {
            $scope.filters = {
                method: "flickr.photos.search",
                tags: "baltimore",
                license: "4,5",
                page: 1
            }, $scope.licenses = Flickr.load({
                method: "flickr.photos.licenses.getInfo"
            }), $scope.selected = [], $scope.active = void 0, $scope.loadItems = function(push) {
                Flickr.load($scope.filters, function(data) {
                    var structured = [];
                    angular.forEach(data.photos.photo, function(item) {
                        structured.push({
                            thumbUrl: "https://farm" + item.farm + ".staticflickr.com/" + item.server + "/" + item.id + "_" + item.secret + "_q.jpg",
                            name: item.title,
                            id: item.id,
                            secret: item.secret,
                            farm: item.farm,
                            server: item.server
                        });
                    }), void 0 !== push && 1 == push ? ($scope.items = void 0 != $scope.items ? $scope.items : [], 
                    Array.prototype.push.apply($scope.items, structured)) : $scope.items = structured;
                });
            }, $scope.updateFilters = function($event) {
                $scope.filters.page = 1, $scope.items = $scope.loadItems(), void 0 != $event && $event.preventDefault();
            }, $scope.updateFilters(), $scope.updateActive = function(item) {
                void 0 != item && ($rootScope.multiple && item.active ? (item.active = !1, angular.forEach($scope.selected, function(activeItem, key) {
                    activeItem.id == item.id && $scope.selected.splice(key, 1);
                }), console.log($scope.active)) : ($scope.active = item, $rootScope.multiple ? item.active = !0 : angular.forEach($scope.items, function(activeItem, key) {
                    $scope.items[key].active = activeItem.id == item.id ? !0 : !1;
                }), Flickr.load({
                    method: "flickr.photos.getInfo",
                    photo_id: item.id,
                    secret: item.secret
                }, function(data) {
                    $scope.active.previewUrl = "https://farm" + item.farm + ".staticflickr.com/" + item.server + "/" + item.id + "_" + item.secret + "_m.jpg", 
                    $scope.active.name = data.photo.title._content, $scope.active.alt = $scope.active.name, 
                    $scope.active.filename = $scope.active.name + ".jpg", $scope.active.source = data.photo.urls.url[0]._content, 
                    $scope.active.user = data.photo.owner.realname ? data.photo.owner.realname : data.photo.owner.username, 
                    $scope.active.userLink = "https://www.flickr.com/people/" + data.photo.owner.nsid, 
                    $scope.active.title = $scope.active.user + " on Flickr", $scope.active.license = data.photo.license, 
                    $scope.active.licenseMeta = $scope.licenses.licenses.license[data.photo.license], 
                    Flickr.load({
                        method: "flickr.photos.getSizes",
                        photo_id: item.id,
                        secret: item.secret
                    }, function(data) {
                        var size = data.sizes.size.pop();
                        $scope.active.width = size.width, $scope.active.height = size.height, $scope.active.url = size.source, 
                        $rootScope.multiple ? $scope.selected.push($scope.active) : $scope.selected = [ $scope.active ];
                    });
                })));
            }, $scope.submit = function($event) {
                $scope.queue = {
                    total: $scope.selected.length,
                    completed: 0,
                    files: []
                }, angular.forEach($scope.selected, function(item, key) {
                    var file = new CoreFile(item);
                    file.$save(function(data) {
                        $scope.queue.completed++, $scope.queue.files[key] = data, $scope.queue.progress = $scope.queue.completed / $scope.queue.total, 
                        $scope.queue.completed >= $scope.queue.total && (Array.prototype.push.apply($rootScope.files, $scope.queue.files), 
                        jQuery("#" + $rootScope.fieldName + "_media").trigger("change"), $scope.queue = void 0, 
                        $state.go("base"));
                    });
                }), $event.preventDefault();
            };
        }
    });
} ]), angular.module("app.flickr").factory("Flickr", function($resource, $rootScope) {
    return $resource("https://api.flickr.com/services/rest/", {
        api_key: $rootScope.flickrApiKey,
        format: "json",
        jsoncallback: "JSON_CALLBACK"
    }, {
        load: {
            method: "JSONP"
        }
    });
}), angular.module("app.core").factory("CoreBrowser", function($resource, $rootScope) {
    return $resource($rootScope.apiUrl + "browse/:person/:type/:name", {
        format: "json",
        type: "@type",
        name: "@name",
        person: "@person"
    }, {
        load: {
            method: "JSON"
        }
    });
}).factory("CoreFile", function($resource, $rootScope) {
    return $resource($rootScope.apiUrl + "file", {
        format: "json",
        fid: "@fid",
        filename: "@filename",
        name: "@name",
        title: "@title",
        alt: "@alt",
        license: "@license",
        source: "@source",
        url: "@url"
    }, {
        load: {
            method: "JSON"
        }
    });
}), angular.module("app.core").controller("thumbnails", function($scope, $rootScope, $state, $stateParams, FileUploader) {
    $scope.init = function(params) {
        $rootScope.apiUrl = void 0 != params.apiUrl ? params.apiUrl : "", $rootScope.cardinality = void 0 != params.cardinality ? parseInt(params.cardinality) : $rootScope.cardinality, 
        $rootScope.multiple = 1 != $rootScope.cardinality, $rootScope.files = void 0 != params.files ? params.files : $rootScope.files, 
        $rootScope.tabs = void 0 != params.tabs ? params.files : $rootScope.tabs, $rootScope.tabs.slice().reverse(), 
        $rootScope.fieldName = void 0 != params.fieldName ? params.fieldName : $rootScope.fieldName, 
        console.log("params", params);
    };
    $scope.uploader = new FileUploader({
        url: $rootScope.apiUrlUpload + "upload",
        autoUpload: !0
    });
    $scope.remove = function(key) {
        $rootScope.files.splice(key, 1);
    }, $scope.edit = function(fid) {
        console.log("edit", fid), $state.go("modal.edit", {
            fid: fid
        });
    }, $scope.select = function($event) {
        $state.go("modal.upload"), $event.preventDefault();
    };
}), angular.module("app.core").directive("thumbnail", function() {
    return {
        restrict: "A",
        templateUrl: appUrl + "views/thumbnail.html",
        link: function($scope, $element, $attrs) {
            if (console.log("thumb scope", $scope), void 0 != $scope.file && (void 0 != $scope.file.filemime || void 0 != $scope.file.mime)) {
                var mime = void 0 != $scope.file.mime ? $scope.file.mime.split("/") : $scope.file.filemime.split("/");
                console.log("mime", mime), $scope.fileType = mime[1];
            }
            $scope["class"] = $attrs["class"];
        }
    };
}).directive("ngThumb", [ "$window", function($window) {
    var helper = {
        support: !(!$window.FileReader || !$window.CanvasRenderingContext2D),
        isFile: function(item) {
            return angular.isObject(item) && item instanceof $window.File;
        },
        isImage: function(file) {
            var type = "|" + file.type.slice(file.type.lastIndexOf("/") + 1) + "|";
            return -1 !== "|jpg|png|jpeg|bmp|gif|".indexOf(type);
        }
    };
    return {
        restrict: "A",
        template: "<canvas/>",
        link: function(scope, element, attributes) {
            function onLoadFile(event) {
                var img = new Image();
                img.onload = onLoadImage, img.src = event.target.result;
            }
            function onLoadImage() {
                var width = params.width || this.width / this.height * params.height, height = params.height || this.height / this.width * params.width;
                canvas.attr({
                    width: width,
                    height: height
                }), canvas[0].getContext("2d").drawImage(this, 0, 0, width, height);
            }
            if (helper.support) {
                var params = scope.$eval(attributes.ngThumb);
                if (helper.isFile(params.file) && helper.isImage(params.file)) {
                    var canvas = element.find("canvas"), reader = new FileReader();
                    reader.onload = onLoadFile, reader.readAsDataURL(params.file);
                }
            }
        }
    };
} ]), angular.module("app.core").directive("editForm", function() {
    return {
        restrict: "A",
        templateUrl: appUrl + "views/editForm.html",
        link: function($scope) {
            console.log("edit form", $scope.file), $scope.saveFile = function() {
                conosle.log($scope.file);
            }, $scope.startCrop = function($event) {
                $scope.crop = !0, $scope.coords = [], $event.preventDefault();
            }, $scope.stopCrop = function() {
                $scope.crop = !1;
            }, $scope.saveCrop = function() {
                console.log($scope.coords);
                var $jcrop = $(".jcrop-holder"), params = {
                    width: $jcrop.width(),
                    height: $jcrop.height(),
                    coords: $scope.coords
                };
                $scope.file.crop = JSON.stringify(params), $scope.file.$save();
            };
        }
    };
});